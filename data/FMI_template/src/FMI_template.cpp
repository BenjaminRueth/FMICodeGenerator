/* 

FMI Interface for FMU generated by FMICodeGenerator.

This file is part of FMICodeGenerator (https://github.com/ghorwin/FMICodeGenerator)

BSD 3-Clause License

Copyright (c) 2018, Andreas Nicolai
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "fmi2common/fmi2Functions.h"
#include "fmi2common/fmi2FunctionTypes.h"
#include "FMI_template.h"

// FMI interface variables

#define FMI_INPUT_X3 3
#define FMI_OUTPUT_X4 4



// *** Variables and functions to be implemented in user code. ***

// *** GUID that uniquely identifies this FMU code
const char * const InstanceData::GUID = "{$$GUID$$}";

// *** Factory function, creates model specific instance of InstanceData-derived class
InstanceData * InstanceData::create() {
	return new FMI_template; // caller takes ownership
}


FMI_template::FMI_template() :
	InstanceData()
{
	// initialize input variables
	m_realInput[FMI_INPUT_X3] = 0;

	// initialize output variables
	m_realOutput[FMI_OUTPUT_X4] = 0; // initial value
}


FMI_template::~FMI_template() {
}


// create a model instance
void FMI_template::init() {
	logger(fmi2OK, "progress", "Starting initialization.");

	if (m_modelExchange) {
		// initialize states
		m_yInput.resize(1);
		m_ydot.resize(1);

		m_yInput[0] = 0;	// = x4
		m_ydot[0] = 0;		// = \dot{x4}
	}
	else {
		// initialize states, these are used for our internal time integration
		m_yInput.resize(1);
		m_yInput[0] = 0;			// = x4, initial value
		// initialize integrator for co-simulation
		m_currentTimePoint = 0;
	}

	logger(fmi2OK, "progress", "Initialization complete.");
}


void FMI_template::updateIfModified() {
	if (!m_externalInputVarsModified)
		return;
	double x3 = m_realInput[FMI_INPUT_X3];

	// compute time derivative
	m_ydot[0] = x3*2;

	// output variable is the same as the conserved quantity
	m_realOutput[FMI_OUTPUT_X4] = m_yInput[0];

	// reset externalInputVarsModified flag
	m_externalInputVarsModified = false;
}


// only for Co-simulation
void FMI_template::integrateTo(double tCommunicationIntervalEnd) {

	// state of FMU before integration:
	//   m_currentTimePoint = t_IntervalStart;
	//   m_y[0] = x4(t_IntervalStart)
	//   m_realInput[FMI_INPUT_X3] = x3(t_IntervalStart...tCommunicationIntervalEnd) = const

	// compute time step size
	double dt = tCommunicationIntervalEnd - m_currentTimePoint;
	double x3 = m_realInput[FMI_INPUT_X3];
	double deltaX4 = dt*x3*2;

	m_yInput[0] += deltaX4;
	m_realOutput[FMI_OUTPUT_X4] = m_yInput[0];
	m_currentTimePoint = tCommunicationIntervalEnd;

	// state of FMU after integration:
	//   m_currentTimePoint = tCommunicationIntervalEnd;
	//   m_y[0] = x4(tCommunicationIntervalEnd)
	//   m_realOutput[FMI_INPUT_X4] = x4(tCommunicationIntervalEnd)
}


void FMI_template::computeFMUStateSize() {
	// distinguish between ModelExchange and CoSimulation
	if (m_modelExchange) {
		// store time, y and ydot, and output
		m_fmuStateSize = sizeof(double)*4;
	}
	else {
		// store time, y and output
		m_fmuStateSize = sizeof(double)*3;
	}
}


void FMI_template::serializeFMUstate(void * FMUstate) {
	double * dataStart = (double*)FMUstate;
	if (m_modelExchange) {
		*dataStart = m_tInput;
		++dataStart;
		*dataStart = m_yInput[0];
		++dataStart;
		*dataStart = m_ydot[0];
		++dataStart;
		*dataStart = m_realOutput[FMI_OUTPUT_X4];
	}
	else {
		*dataStart = m_currentTimePoint;
		++dataStart;
		*dataStart = m_yInput[0];
		++dataStart;
		*dataStart = m_realOutput[FMI_OUTPUT_X4];
	}
}


void FMI_template::deserializeFMUstate(void * FMUstate) {
	const double * dataStart = (const double*)FMUstate;
	if (m_modelExchange) {
		m_tInput = *dataStart;
		++dataStart;
		m_yInput[0] = *dataStart;
		++dataStart;
		m_ydot[0] = *dataStart;
		++dataStart;
		m_realOutput[FMI_OUTPUT_X4] = *dataStart;
		m_externalInputVarsModified = true;
	}
	else {
		m_currentTimePoint = *dataStart;
		++dataStart;
		m_yInput[0] = *dataStart;
		++dataStart;
		m_realOutput[FMI_OUTPUT_X4] = *dataStart;
	}
}


