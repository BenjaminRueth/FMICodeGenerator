/* 

FMI Interface for FMU generated by FMICodeGenerator.

This file is part of FMICodeGenerator (https://github.com/ghorwin/FMICodeGenerator)

BSD 3-Clause License

Copyright (c) 2018, Andreas Nicolai
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "fmi2common/fmi2Functions.h"
#include "fmi2common/fmi2FunctionTypes.h"
#include "FMI_template.h"

// FMI interface variables

$$variables$$

// *** Variables and functions to be implemented in user code. ***

// *** GUID that uniquely identifies this FMU code
const char * const InstanceData::GUID = "{$$GUID$$}";

// *** Factory function, creates model specific instance of InstanceData-derived class
InstanceData * InstanceData::create() {
	return new FMI_template; // caller takes ownership
}


FMI_template::FMI_template() :
	InstanceData()
{
	$$initialization$$
}


FMI_template::~FMI_template() {
}


// create a model instance
void FMI_template::init() {
	logger(fmi2OK, "progress", "Starting initialization.");

	if (m_modelExchange) {
		// initialize states
		$$initialStatesME$$

		// TODO : implement your own initialization code here
	}
	else {
		// initialize states, these are used for our internal time integration
		$$initialStatesCS$$

		// TODO : implement your own initialization code here

		// initialize integrator for co-simulation
		m_currentTimePoint = 0;
	}

	logger(fmi2OK, "progress", "Initialization complete.");
}


// model exchange: implementation of derivative and output update
void FMI_template::updateIfModified() {
	if (!m_externalInputVarsModified)
		return;

	// get input variables
	$$getInputVars$$

	// TODO : implement your code here

	// output variables
	$$setOutputVars$$

	// reset externalInputVarsModified flag
	m_externalInputVarsModified = false;
}


// Co-simulation: time integration
void FMI_template::integrateTo(double tCommunicationIntervalEnd) {

	// state of FMU before integration:
	//   m_currentTimePoint = t_IntervalStart;

	// get input variables
	$$getInputVars$$


	// TODO : implement your code here


	// output variables
	$$setOutputVars$$

	m_currentTimePoint = tCommunicationIntervalEnd;

	// state of FMU after integration:
	//   m_currentTimePoint = tCommunicationIntervalEnd;
}


void FMI_template::computeFMUStateSize() {
	// distinguish between ModelExchange and CoSimulation
	if (m_modelExchange) {
		// store time, states and outputs
		m_fmuStateSize = sizeof(double)*1;
		$$serializationSizeVars$$
	}
	else {
		// store time and outputs
		m_fmuStateSize = sizeof(double)*1;
		$$serializationSizeVars$$
	}
}


void FMI_template::serializeFMUstate(void * FMUstate) {
	double * dataStart = (double*)FMUstate;
	if (m_modelExchange) {
		*dataStart = m_tInput;
		++dataStart;
		$$serializeVars$$
	}
	else {
		*dataStart = m_currentTimePoint;
		++dataStart;
		$$serializeVars$$
	}
}


void FMI_template::deserializeFMUstate(void * FMUstate) {
	const double * dataStart = (const double*)FMUstate;
	if (m_modelExchange) {
		m_tInput = *dataStart;
		++dataStart;
		$$deserializeVars$$
		m_externalInputVarsModified = true;
	}
	else {
		m_currentTimePoint = *dataStart;
		++dataStart;
		$$deserializeVars$$
	}
}


